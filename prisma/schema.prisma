generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------- ENUM -------------------
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  EWALLET
}

enum MovieStatus {
  SEDANG_TAYANG
  SEBENTAR_LAGI
}

// ------------------- AUTH -------------------
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(uuid())
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       Session[]
  createdAt DateTime  @default(now())
  bookings  Booking[]
  reviews   Review[]
  role      String? @default("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------- PRODUCT -------------------
model Vendor {
  id       String    @id @default(uuid())
  name     String
  type     String
  contact  String?
  address  String?
  products Product[]
}

model Product {
  id           String        @id @default(uuid())
  vendorId     String
  category     String
  title        String
  description  String?
  location     String?
  currency     String        @default("IDR") // Tambahan
  price        Decimal       @db.Decimal(10, 2)
  startDate    DateTime?
  endDate      DateTime?
  capacity     Int?          // Tambahan untuk event/hotel
  createdAt    DateTime      @default(now())
  bookingItems BookingItem[]
  eventDetail  EventDetail?
  flightDetail FlightDetail?
  hotelDetail  HotelDetail?
  vendor       Vendor        @relation(fields: [vendorId], references: [id])
  reviews      Review?
  trainDetail  TrainDetail?
  movieDetail  MovieDetail?
}

// ------------------- BOOKING -------------------
model Booking {
  id          String         @id @default(uuid())
  userId      String
  totalAmount Decimal        @db.Decimal(10, 2)
  status      BookingStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id])
  items       BookingItem?
  payment     Payment?
  tickets     Ticket?
  passengers  Passenger[]    // Tambahan
}

model BookingItem {
  id        String  @id @default(uuid())
  bookingId String  @unique
  productId String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  booking   Booking @relation(fields: [bookingId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Passenger {
  id          String   @id @default(uuid())
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String
  type        String   // 'adult', 'child', 'infant'
  title       String   // 'Tuan', 'Nyonya', 'Nona'
  firstName   String
  lastName    String
  dateOfBirth DateTime
  nationality String
  documentType String  // 'passport', 'ktp'
  documentNumber String
  documentExpiry DateTime?
  seat        String?
  mealPreference String?
  createdAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ------------------- PAYMENT -------------------
model Payment {
  id              String         @id @default(uuid())
  bookingId       String         @unique
  method          PaymentMethod
  status          PaymentStatus  @default(PENDING)
  amount          Decimal        @db.Decimal(10, 2)
  currency        String         @default("IDR")
  transactionId   String?        // Tambahan dari gateway
  paidAt          DateTime?
  paymentGateway  String?        // contoh: Midtrans
  booking         Booking        @relation(fields: [bookingId], references: [id])
}

// ------------------- TICKET -------------------
model Ticket {
  id         String   @id @default(uuid())
  bookingId  String   @unique
  ticketCode String   @unique
  qrCodeUrl  String?
  seatNumber String?
  issuedAt   DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
}

// ------------------- REVIEW -------------------
model Review {
  id        String   @id @default(uuid())
  productId String   @unique
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// ------------------- PROMOTION -------------------
model Promotion {
  id            String   @id @default(uuid())
  code          String   @unique
  description   String?
  discountType  String
  discountValue Decimal  @db.Decimal(10, 2)
  startDate     DateTime
  endDate       DateTime
}

// ------------------- AIRLINE ------------------
model Airline {
  id    String  @id @default(uuid())
  name  String
  iata  String?
  icao  String?
  logo  String?
  flights FlightDetail[]
}

// ------------------- FLIGHT -------------------
model FlightDetail {
  id                    String        @id @default(uuid())
  productId             String        @unique
  flightNumber          String        @unique
  originAirportCode     String?
  destinationAirportCode String?
  departure             String
  arrival               String
  departureTime         DateTime
  arrivalTime           DateTime
  duration              String?       // PT2H30M
  classes               FlightClass[]
  airlineId             String
  airline               Airline @relation(fields: [airlineId], references: [id])
  product               Product       @relation(fields: [productId], references: [id])
}

model FlightClass {
  id             String       @id @default(uuid())
  flightDetailId String
  className      String
  price          Decimal      @db.Decimal(10, 2)
  seatCount      Int
  flightDetail   FlightDetail @relation(fields: [flightDetailId], references: [id])
}

// ------------------- HOTEL -------------------
model HotelDetail {
  id         String  @id @default(uuid())
  productId  String  @unique
  roomType   String
  facilities String?
  stars      Int?
  product    Product @relation(fields: [productId], references: [id])
}

// ------------------- EVENT -------------------
model EventDetail {
  id        String   @id @default(uuid())
  productId String   @unique
  venue     String
  organizer String?
  eventDate DateTime
  product   Product  @relation(fields: [productId], references: [id])
}

// ------------------- TRAIN -------------------
model TrainDetail {
  id                  String       @id @default(uuid())
  productId           String       @unique
  trainName           String
  trainNumber         String
  departureStation    String
  arrivalStation      String
  departureTime       DateTime
  arrivalTime         DateTime
  duration            String?      // Tambahan
  trainOperator       String?      // Tambahan
  classes             TrainClass[]
  product             Product      @relation(fields: [productId], references: [id])
}

model TrainClass {
  id            String      @id @default(uuid())
  trainDetailId String
  className     String
  price         Decimal     @db.Decimal(10, 2)
  seatCount     Int
  trainDetail   TrainDetail @relation(fields: [trainDetailId], references: [id])
}

// ------------------- MOVIE -------------------
model MovieDetail {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @unique
  duration    Int       // durasi dalam menit
  genre       String
  rating      String    // contoh: SU, R, PG-13
  language    String?
  subtitle    String?
  posterUrl   String?
  status      MovieStatus
}

model OtpToken {
  id         String   @id @default(uuid())
  email      String
  otp        String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

// ------------------- FLIGHT CACHE -------------------
model FlightCache {
  id                    String   @id @default(uuid())
  flightNumber          String
  airlineName           String
  airlineIata           String?
  airlineIcao           String?
  airlineLogo           String?
  originAirportCode     String
  destinationAirportCode String
  originAirportName     String?
  destinationAirportName String?
  departureTime         DateTime
  arrivalTime           DateTime
  duration              String?       // PT2H30M format
  price                 Decimal       @db.Decimal(10, 2)
  availableSeats        Int
  class                 String        // economy, business, first
  searchParams          Json          // Store original search parameters
  cachedAt              DateTime      @default(now())
  expiresAt             DateTime      // TTL for cache expiration
  
  @@index([originAirportCode, destinationAirportCode, departureTime])
  @@index([cachedAt])
  @@index([expiresAt])
}

model FlightSearchCache {
  id           String   @id @default(uuid())
  searchParams Json     // Store search parameters as JSON
  searchHash   String   @unique // Hash of search params for quick lookup
  results      Json     // Store flight results as JSON
  cachedAt     DateTime @default(now())
  expiresAt    DateTime // TTL for cache expiration
  
  @@index([searchHash])
  @@index([cachedAt])
  @@index([expiresAt])
}
