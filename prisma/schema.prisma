generator client {
  provider = "prisma-client-js"
  // HAPUS atau KOMENTARI baris output custom!
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(uuid())
  name           String?
  email          String?  @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt DateTime  @default(now())
  bookings  Booking[]
  reviews   Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vendor {
  id       String    @id @default(uuid())
  name     String
  type     String
  contact  String?
  address  String?
  products Product[]
}

model Product {
  id           String        @id @default(uuid())
  vendorId     String
  category     String
  title        String
  description  String?
  location     String?
  price        Decimal       @db.Decimal(10, 2)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  bookingItems BookingItem[]
  eventDetail  EventDetail?
  flightDetail FlightDetail?
  hotelDetail  HotelDetail?
  vendor       Vendor        @relation(fields: [vendorId], references: [id])
  reviews      Review?
  trainDetail  TrainDetail?
  movieDetail  MovieDetail?
}

model Booking {
  id          String       @id @default(uuid())
  userId      String
  totalAmount Decimal      @db.Decimal(10, 2)
  status      String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  items       BookingItem?
  payment     Payment?
  tickets     Ticket?
}

model BookingItem {
  id        String  @id @default(uuid())
  bookingId String  @unique
  productId String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  booking   Booking @relation(fields: [bookingId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id        String    @id @default(uuid())
  bookingId String    @unique
  method    String
  status    String
  amount    Decimal   @db.Decimal(10, 2)
  paidAt    DateTime?
  booking   Booking   @relation(fields: [bookingId], references: [id])
}

model Ticket {
  id         String   @id @default(uuid())
  bookingId  String   @unique
  ticketCode String   @unique
  qrCodeUrl  String?
  seatNumber String?
  issuedAt   DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String   @unique
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Promotion {
  id            String   @id @default(uuid())
  code          String   @unique
  description   String?
  discountType  String
  discountValue Decimal  @db.Decimal(10, 2)
  startDate     DateTime
  endDate       DateTime
}

model FlightDetail {
  id            String        @id @default(uuid())
  productId     String        @unique
  airline       String
  flightNumber  String
  departure     String
  arrival       String
  departureTime DateTime
  arrivalTime   DateTime
  classes       FlightClass[]
  product       Product       @relation(fields: [productId], references: [id])
}

model FlightClass {
  id             String       @id @default(uuid())
  flightDetailId String
  className      String
  price          Decimal      @db.Decimal(10, 2)
  seatCount      Int
  flightDetail   FlightDetail @relation(fields: [flightDetailId], references: [id])
}

model HotelDetail {
  id         String  @id @default(uuid())
  productId  String  @unique
  roomType   String
  facilities String?
  stars      Int?
  product    Product @relation(fields: [productId], references: [id])
}

model EventDetail {
  id        String   @id @default(uuid())
  productId String   @unique
  venue     String
  organizer String?
  eventDate DateTime
  product   Product  @relation(fields: [productId], references: [id])
}

model TrainDetail {
  id               String       @id @default(uuid())
  productId        String       @unique
  trainName        String
  trainNumber      String
  departureStation String
  arrivalStation   String
  departureTime    DateTime
  arrivalTime      DateTime
  classes          TrainClass[]
  product          Product      @relation(fields: [productId], references: [id])
}

model TrainClass {
  id            String      @id @default(uuid())
  trainDetailId String
  className     String
  price         Decimal     @db.Decimal(10, 2)
  seatCount     Int
  trainDetail   TrainDetail @relation(fields: [trainDetailId], references: [id])
}

model MovieDetail {
  id          String       @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String       @unique
  duration    Int       // durasi dalam menit
  genre       String
  rating      String    // contoh: SU, R, PG-13
  language    String?
  subtitle    String?
  posterUrl   String?
  status      MovieStatus
}

enum MovieStatus {
  SEDANG_TAYANG
  SEBENTAR_LAGI
}